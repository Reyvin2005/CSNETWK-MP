import socket
import threading
import os
import datetime

# IP Address and Port Number
HOST = "127.0.0.1"
PORT = 12345

# Directory path where the server will store or retrieve files
SERVER_DIR = "server_files"

# Ensures that the directory is available before any file operations
if not os.path.exists(SERVER_DIR):
    os.makedirs(SERVER_DIR)

# Dictionary to store and keep track of clients
clients = {}


def send_file(conn, filename):
    """
    Sends a file from the server to the client.

    Args:
        conn (socket.socket): The socket object for the client connection.
        filename (str): The name of the file to be sent from the server's directory.
    """
    file_path = os.path.join(SERVER_DIR, filename)
    if os.path.exists(file_path):
        with open(file_path, "rb") as f:
            conn.sendall(f"Sending {filename} from server...".encode())
            while chunk := f.read(4096):
                conn.sendall(chunk)
            conn.sendall(b"/endfile")
    else:
        conn.sendall(b"Error: File not found.")


def receive_file(conn, filename, handle):
    """
    Receives a file from the client and stores it on the server.
    Args:
        conn (socket.socket): The socket object for the client connection.
        filename (str): The name of the file to be received and stored on the server.
        handle (str): The alias or handle of the client uploading the file.
    """
    file_path = os.path.join(SERVER_DIR, filename)

    # Ensure the file doesn't exist already to prevent overwriting
    if os.path.exists(file_path):
        conn.sendall(b"Error: File already exists on the server.")
        return

    try:
        with open(file_path, 'wb') as f:
            while True:
                data = conn.recv(4096)
                if data == b"/endfile":
                    break
                f.write(data)
        
        timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        conn.sendall(f"{handle}<{timestamp}>: Uploaded {filename}".encode())
    except Exception as e:
        print(f"[ERROR] Failed to store file '{filename}': {e}")
        conn.sendall("Error: File could not be stored.".encode())
        

def handle_client(client_socket, client_addr):
    """
    Handles communication with a connected client.

    Args:
        client_socket (socket.socket): The socket object for the client connection.
        client_addr (tuple): The address of the connected client.
    """
    alias = None
    joined = False

    # Sends a welcome message to the client
    client_socket.send(b"Welcome to the File Exchange Server!")

    while True:
        try:
            # Processes incoming data from the client
            data = client_socket.recv(1024).decode("utf-8").strip()

            # Checks if the client has stopped sending data
            if not data:
                break

            print(f"[{client_addr}] {data}")

            if data.startswith("/join"):
                parts = data.split()
                if len(parts) != 3:
                    client_socket.send(b"Error: Command parameters do not match or is not allowed.")
                elif joined:
                    client_socket.send(b"Error: Already joined.")
                else:
                    _, ip, port = data.split()
                    if ip == HOST and int(port) == PORT:
                        joined = True
                        client_socket.send(b"Connection to the File Exchange Server is successful!")
                    else:
                        client_socket.send(b"Error: Connection to the Server has failed! Please check IP Address and Port Number.")

            elif data.startswith("/register"):
                if not joined:
                    client_socket.send(b"Error: Please join the server first.")
                elif alias:
                    client_socket.send(b"Error: Already registered.")
                else:
                    parts = data.split()
                    if len(parts) != 2:
                        client_socket.send(b"Error: Command parameters do not match or is not allowed.")
                    else:
                        alias_candidate = parts[1]
                        if alias_candidate in clients.values():
                            client_socket.send(b"Error: Registration failed. Handle or alias already exists.")
                        else:
                            alias = alias_candidate
                            clients[client_socket] = alias
                            client_socket.send(f"Welcome {alias}!".encode("utf-8"))

            elif data.startswith("/store"):
                if not joined:
                    client_socket.send(b"Error: Please join the server first.")
                elif not alias:
                    client_socket.send(b"Error: Please register first.")
                else:
                    parts = data.split()
                    if len(parts) != 2:
                        client_socket.send(b"Error: Command parameters do not match or is not allowed.")
                    else:
                        filename = parts[1]
                        receive_file(client_socket, filename, alias)

            elif data.startswith("/get"):
                if not joined:
                    client_socket.send(b"Error: Please join the server first.")
                elif not alias:
                    client_socket.send(b"Error: Please register first.")
                else:
                    parts = data.split()
                    if len(parts) != 2:
                        client_socket.send(b"Error: Command parameters do not match or is not allowed.")
                    else:
                        filename = parts[1]
                        send_file(client_socket, filename)

            elif data == "/dir":
                if not joined:
                    client_socket.send(b"Error: Please join the server first.")
                elif not alias:
                    client_socket.send(b"Error: Please register first.")
                else:
                    files = os.listdir(SERVER_DIR)
                    file_list = "\n".join(files) if files else "No files available."
                    client_socket.send(file_list.encode("utf-8"))

            elif data == "/?":
                commands = """
Available Commands:
/join <server_ip> <port>
/leave
/register <handle>
/store <filename>
/dir
/get <filename>
/? (help)
"""
                client_socket.send(commands.encode("utf-8"))

            elif data == "/leave":
                if not joined:
                    client_socket.send(b"Error: Disconnection failed. Please connect to the server first.")
                else:
                    client_socket.send(b"Connection closed. Thank you!")
                    break

            else:
                client_socket.send(b"Error: Command not found.")

        except Exception as e:
            print(f"Error with client {client_addr}: {e}")
            break

    if alias and client_socket in clients:
        del clients[client_socket]
    client_socket.close()


def start_server():
    """
    Starts the server to listen for incoming client connections.
    """
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind((HOST, PORT))
    server_socket.listen(5)
    print(f"[STARTING] Server is running on {HOST}:{PORT}")

    while True:
        client_socket, client_addr = server_socket.accept()
        threading.Thread(target=handle_client, args=(client_socket, client_addr), daemon=True).start()


if __name__ == "__main__":
    start_server()
