import socket
import threading
import os

def receive_messages():
    while True:
        try:
            message = client.recv(1024).decode()
            if message:
                print("Server:", message)
                if message == "Connection closed. Thank you!":
                    break
        except ConnectionResetError:
            print("[INFO] Connection closed by the server.")
            break
        except Exception as e:
            print(f"[ERROR] {e}")
            break
        
def send_command(cmd):
    try:
        client.send(cmd.encode())
        if cmd == "/leave":
            response = client.recv(1024).decode()
            print("Server:", response)
            if response == "Connection closed. Thank you!":
                return True
    except ConnectionError as e:
        pass
    return False

def send_file(file_path):
    if os.path.exists(file_path):
        try:
            with open(file_path, 'rb') as file:
                client.send(f"/store {os.path.basename(file_path)}".encode())
                while chunk := file.read(4096):
                    client.send(chunk)
                client.send(b"/endfile")
        except Exception as e:
            print(f"[ERROR] Failed to send file: {e}")
    else:
        print("[ERROR] File does not exist.")

# Create a socket object
client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

# Connect to the server
server_address = ('127.0.0.1', 12345)  # Replace with your server's address and port
try:
    client.connect(server_address)
except ConnectionRefusedError:
    print("Error: Connection to the Server has failed! Please check IP Address and Port Number.")
    exit()

# Start receiving thread
thread = threading.Thread(target=receive_messages)
thread.start()

# Send commands to server
print("Enter commands:")
try:
    while True:
        cmd = input("> ")
        if cmd.startswith("/sendfile "):
            file_path = cmd.split(" ", 1)[1]
            send_file(file_path)
        else:
            send_command(cmd)
        if cmd == "/leave":
            send_command(cmd)  # Send the leave command to the server
            break
except Exception as e:
    print(f"An error occurred: {e}")
finally:
    try:
        client.close()
    except Exception as e:
        print(f"[ERROR] Failed to close the client socket: {e}")
    thread.join()